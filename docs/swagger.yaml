basePath: /api/v1
definitions:
  data.BuyerLoginResponseData:
    properties:
      buyer_id:
        type: string
      email:
        type: string
      verification:
        type: string
    required:
    - buyer_id
    - email
    - verification
    type: object
  data.CreateGuestOrderResponseData:
    properties:
      guest_order_id:
        type: string
      redirect_url:
        type: string
    required:
    - guest_order_id
    - redirect_url
    type: object
  data.CreateOrderResponseData:
    properties:
      order_id:
        type: string
      redirect_url:
        type: string
    required:
    - order_id
    - redirect_url
    type: object
  data.CreateProductResponseData:
    properties:
      condition:
        type: integer
      desc:
        type: string
      discount:
        type: integer
      expansion:
        type: string
      language:
        type: string
      order_by:
        type: string
      posted_date:
        example: 2023-08-03 02:50:26.034552906 +0000 UTC m=+192.307467936
        type: string
      price:
        type: integer
      product_id:
        type: string
      product_quantity:
        type: integer
      product_type:
        type: string
      releases_on:
        type: string
      seller_id:
        type: string
      sold_quantity:
        type: integer
      title:
        type: string
    required:
    - condition
    - desc
    - expansion
    - language
    - posted_date
    - price
    - product_id
    - product_quantity
    - product_type
    - seller_id
    - sold_quantity
    - title
    type: object
  data.GetGuestOrderByIdResponseData:
    properties:
      address_line_1:
        type: string
      address_line_2:
        type: string
      email:
        type: string
      fees:
        $ref: '#/definitions/data.OrderFees'
      guest_order_id:
        type: string
      order_date:
        type: string
      order_quantity:
        type: integer
      payment_status:
        type: string
      phone_number:
        type: string
      postal_code:
        type: string
      product_id:
        type: string
      telegram_handle:
        type: string
    required:
    - address_line_1
    - email
    - fees
    - guest_order_id
    - order_date
    - order_quantity
    - payment_status
    - phone_number
    - postal_code
    - product_id
    type: object
  data.GetOrderByIdResponseData:
    properties:
      address_line_1:
        type: string
      address_line_2:
        type: string
      buyer_id:
        type: string
      fees:
        $ref: '#/definitions/data.OrderFees'
      order_date:
        type: string
      order_id:
        type: string
      order_quantity:
        type: integer
      payment_status:
        type: string
      phone_number:
        type: string
      postal_code:
        type: string
      product_id:
        type: string
      telegram_handle:
        type: string
    required:
    - address_line_1
    - buyer_id
    - fees
    - order_date
    - order_id
    - order_quantity
    - payment_status
    - phone_number
    - postal_code
    - product_id
    type: object
  data.GetProductListResponseData:
    properties:
      product_count:
        type: integer
      products:
        items:
          $ref: '#/definitions/data.GetProductResponseData'
        type: array
    required:
    - product_count
    - products
    type: object
  data.GetProductResponseData:
    properties:
      condition:
        type: integer
      desc:
        type: string
      discount:
        type: integer
      expansion:
        type: string
      images:
        items:
          $ref: '#/definitions/data.ProductImageData'
        type: array
      language:
        type: string
      order_by:
        type: string
      posted_date:
        example: 2023-08-03 02:50:26.034552906 +0000 UTC m=+192.307467936
        type: string
      price:
        type: integer
      product_id:
        type: string
      product_quantity:
        type: integer
      product_type:
        type: string
      releases_on:
        type: string
      seller_info:
        $ref: '#/definitions/data.GetSellerByIdResponseData'
      sold_quantity:
        type: integer
      title:
        type: string
    required:
    - condition
    - desc
    - expansion
    - images
    - language
    - posted_date
    - price
    - product_id
    - product_quantity
    - product_type
    - seller_info
    - sold_quantity
    - title
    type: object
  data.GetSellerByIdResponseData:
    properties:
      followers:
        type: integer
      seller_id:
        type: string
      seller_name:
        type: string
    required:
    - followers
    - seller_id
    - seller_name
    type: object
  data.Message:
    properties:
      message:
        type: string
    type: object
  data.OrderFees:
    properties:
      delivery_fee:
        type: integer
      delivery_type:
        type: string
      payment_fee:
        type: integer
      payment_type:
        type: string
      product_price:
        type: integer
      small_order_fee:
        type: integer
      total_paid:
        type: integer
    required:
    - delivery_type
    - payment_type
    - product_price
    - total_paid
    type: object
  data.ProductImageData:
    properties:
      image_no:
        type: integer
      image_path:
        type: string
    required:
    - image_no
    - image_path
    type: object
  data.SellerLoginResponseData:
    properties:
      email:
        type: string
      followers:
        type: integer
      seller_id:
        type: string
      seller_name:
        type: string
    required:
    - email
    - followers
    - seller_id
    - seller_name
    type: object
host: '*'
info:
  contact: {}
  description: This is the REST API for Aucto's marketplace, it is currently in v1.
  title: AUCTO Backend API
  version: "1.0"
paths:
  /buyers/login:
    post:
      consumes:
      - application/json
      description: Checks to see if a buyer email exists and if supplied password
        matches the stored password
      parameters:
      - description: Buyers email
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: Buyers password as plaintext
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.BuyerLoginResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/data.Message'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/data.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/data.Message'
      summary: Logs a buyer into their account
  /buyers/resend-otp:
    post:
      consumes:
      - application/json
      description: Checks to see if the provided buyer_id exists and sends a email
        to the specific buy_ids email with a newly
      parameters:
      - description: Buyer Id
        in: body
        name: buyer_id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/data.Message'
      summary: Sends a new Otp to the provided email
  /buyers/signup:
    post:
      consumes:
      - application/json
      description: Checks to see if a buyer email exists and if not creates a new
        account with supplied email and password
      parameters:
      - description: Buyers email [UNIQUE]
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: Buyers password as plaintext
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.BuyerLoginResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/data.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/data.Message'
      summary: Signs a new buyer up
  /buyers/validate-otp:
    post:
      consumes:
      - application/json
      description: Checks to see if the provided buyer exists, if not returns a 400.
        Otherwise it checks to see if the otps match. If not it
      parameters:
      - description: Buyer Id
        in: body
        name: buyer_id
        required: true
        schema:
          type: string
      - description: Otp
        in: body
        name: otp
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.BuyerLoginResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/data.Message'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/data.Message'
      summary: Validates a given otp from a specific buyer
  /orders:
    post:
      consumes:
      - application/json
      description: Creates a new order for a specific product. This order is created
        by an existing buyer with an account.
      parameters:
      - description: The product for which we are creating an order
        in: body
        name: product_id
        required: true
        schema:
          type: string
      - description: The id of the buyer who is creating the order
        in: body
        name: buyer_id
        required: true
        schema:
          type: string
      - description: Quantity of the product being ordered
        in: body
        name: order_quantity
        required: true
        schema:
          type: integer
      - description: Phone number of buyer
        in: body
        name: phone_number
        required: true
        schema:
          type: string
      - description: Delivery Address
        in: body
        name: address_line_1
        required: true
        schema:
          type: string
      - description: Delivery Address 2
        in: body
        name: address_line_2
        schema:
          type: string
      - description: Postal code of address
        in: body
        name: postal_code
        schema:
          type: string
      - description: Pricing Info, Delivery Type is either 'self_collection' or 'standard
          delivery', Payment type is 'card' or 'paynow_online'
        in: body
        name: fees
        schema:
          $ref: '#/definitions/data.OrderFees'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/data.CreateOrderResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/data.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/data.Message'
      summary: Creates a new order
  /orders/{id}:
    get:
      consumes:
      - application/json
      description: Returns the order details of an order with a given order id. If
        the order id does not exists, returns a 404 error.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.GetOrderByIdResponseData'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/data.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/data.Message'
      summary: Fetched order details for an order with a specific order id
  /orders/{id}/guest:
    get:
      consumes:
      - application/json
      description: Returns the order details of an guest order with a given guest
        order id. If the order id does not exists, returns a 404 error.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.GetGuestOrderByIdResponseData'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/data.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/data.Message'
      summary: Fetched order details for an guest order with a specific guest order
        id
  /orders/guest:
    post:
      consumes:
      - application/json
      description: Creates a new order for a specific product. This order is created
        by a guest user.
      parameters:
      - description: The product for which we are creating an order
        in: body
        name: product_id
        required: true
        schema:
          type: string
      - description: The email of the guest user
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: Quantity of the product being ordered
        in: body
        name: order_quantity
        required: true
        schema:
          type: integer
      - description: Payment method chosen for this order, can only be 'card' or 'paynow_online'
        in: body
        name: payment_type
        required: true
        schema:
          type: string
      - description: Type of delivery method, can only be 'self_collection' or 'standard_delivery'
        in: body
        name: delivery_type
        required: true
        schema:
          type: string
      - description: Phone number of buyer
        in: body
        name: phone_number
        required: true
        schema:
          type: string
      - description: Delivery Address
        in: body
        name: address_line_1
        required: true
        schema:
          type: string
      - description: Delivery Address 2
        in: body
        name: address_line_2
        schema:
          type: string
      - description: Postal code of address
        in: body
        name: postal_code
        schema:
          type: string
      - description: Amount to be paid for the order in cents
        in: body
        name: amount
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/data.CreateGuestOrderResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/data.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/data.Message'
      summary: Creates a new guest order
  /products:
    get:
      consumes:
      - application/json
      description: Gets product information of products given query parameters provided
        in the Request
      parameters:
      - description: Sort By a specific attribute of the product. Default is posted_date
        in: query
        name: sort_by
        type: string
      - description: Get products by a specific product type, the types are 'Pre-Order'
          or 'Buy-Now'. Default is both will be selected
        in: query
        name: product_type
        type: string
      - description: Get products filtered by the language of the expansion. The choices
          are 'Eng' or 'Jap' and default is both.
        in: query
        name: language
        type: string
      - description: Get products filtered by the expansion of the product. Default
          is all expansions
        in: query
        name: expansion
        type: string
      - description: Minimum price of the products, will fetch products of greater
          than or equal to value than minimum price
        in: query
        name: min_price
        type: integer
      - description: Maximum price of the products, will fetch products of lesser
          than or equal to value than maximum price
        in: query
        name: max_price
        type: integer
      - description: Indicates the offset for the products
        in: query
        name: anchor
        required: true
        type: integer
      - description: Indicates the number of products fetched
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.GetProductListResponseData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/data.Message'
      summary: Gets Products with given query parameters
    post:
      description: Creates a new product post with the supplied data, if the data
        is not valid it throws and error
      parameters:
      - description: The Seller who posted the product's seller_id
        in: body
        name: seller_id
        required: true
        schema:
          type: string
      - description: Title of the product
        in: body
        name: title
        required: true
        schema:
          type: string
      - description: Short description of the product
        in: body
        name: description
        required: true
        schema:
          type: string
      - description: Price as an int of the product
        in: body
        name: price
        required: true
        schema:
          type: integer
      - description: Condition of the product from a scale of 0 to 5
        in: body
        name: condition
        required: true
        schema:
          type: integer
      - description: 'Type of product sale: Buy-Now or Pre-Order'
        in: body
        name: product_type
        required: true
        schema:
          type: string
      - description: Language of the product, is either 'Eng' or 'Jap'
        in: body
        name: language
        required: true
        schema:
          type: string
      - description: Expansion of the product
        in: body
        name: expansion
        required: true
        schema:
          type: string
      - description: Quantity of product to be put for sale
        in: body
        name: product_quantity
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/data.CreateProductResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/data.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/data.Message'
      summary: Creates a new product post
  /products/{id}:
    get:
      description: Checks to see if a product with a given id exists and returns its
        product information if it does.
      parameters:
      - description: product_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.GetProductResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/data.Message'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/data.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/data.Message'
      summary: Gets a Product by its Product ID
  /products/{id}/images:
    post:
      consumes:
      - multipart/form-data
      description: Adds images to an existing product with supplied product id. If
        product with product id does not exist returns a
      parameters:
      - description: product_id
        in: path
        name: id
        required: true
        type: string
      - description: Array of image files to add to the product post
        in: formData
        name: images
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/data.Message'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/data.Message'
        "415":
          description: Unsupported Media Type
          schema:
            $ref: '#/definitions/data.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/data.Message'
      summary: Adds images to products
  /sellers/{id}:
    get:
      consumes:
      - application/json
      description: Checks to see if a sellers id exists and if it does returns the
        specified sellers public information,
      parameters:
      - description: seller_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.GetSellerByIdResponseData'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/data.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/data.Message'
      summary: Gets seller info based on seller id
  /sellers/login:
    post:
      consumes:
      - application/json
      description: Checks to see if a sellers email exists and if supplied password
        matches the stored password
      parameters:
      - description: Sellers email
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: Sellers password as plaintext
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.SellerLoginResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/data.Message'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/data.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/data.Message'
      summary: Logs a seller into their account
  /sellers/signup:
    post:
      consumes:
      - application/json
      description: Checks to see if a seller email does not already exists if so creates
        a new
      parameters:
      - description: Sellers email [UNIQUE]
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: Sellers password as plaintext
        in: body
        name: password
        required: true
        schema:
          type: string
      - description: Sellers seller alias that is displayed as their seller name [UNIQUE]
        in: body
        name: seller_name
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.SellerLoginResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/data.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/data.Message'
      summary: Signs a new seller up
swagger: "2.0"
