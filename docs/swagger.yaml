basePath: /api/v1
definitions:
  data.BuyerLoginResponseData:
    properties:
      buyer_id:
        type: string
      email:
        type: string
    required:
    - buyer_id
    - email
    type: object
  data.GetProductResponseData:
    properties:
      condition:
        type: integer
      desc:
        type: string
      images:
        items:
          $ref: '#/definitions/data.ProductImageData'
        type: array
      posted_date:
        example: 2023-08-03 02:50:26.034552906 +0000 UTC m=+192.307467936
        type: string
      price:
        type: integer
      product_id:
        type: string
      product_quantity:
        type: integer
      product_type:
        type: string
      seller_id:
        type: string
      sold_quantity:
        type: integer
      title:
        type: string
    required:
    - condition
    - desc
    - images
    - posted_date
    - price
    - product_id
    - product_quantity
    - product_type
    - seller_id
    - sold_quantity
    - title
    type: object
  data.Message:
    properties:
      message:
        type: string
    type: object
  data.ProductCreateResponseData:
    properties:
      condition:
        type: integer
      desc:
        type: string
      posted_date:
        example: 2023-08-03 02:50:26.034552906 +0000 UTC m=+192.307467936
        type: string
      price:
        type: integer
      product_id:
        type: string
      product_quantity:
        type: integer
      product_type:
        type: string
      seller_id:
        type: string
      sold_quantity:
        type: integer
      title:
        type: string
    required:
    - condition
    - desc
    - posted_date
    - price
    - product_id
    - product_quantity
    - product_type
    - seller_id
    - sold_quantity
    - title
    type: object
  data.ProductImageData:
    properties:
      image_no:
        type: integer
      image_path:
        type: string
    required:
    - image_no
    - image_path
    type: object
  data.SellerResponseData:
    properties:
      email:
        type: string
      followers:
        type: integer
      seller_id:
        type: string
      seller_name:
        type: string
    required:
    - email
    - followers
    - seller_id
    - seller_name
    type: object
host: '*'
info:
  contact: {}
  description: This is the REST API for Aucto's marketplace, it is currently in v1.
  title: AUCTO Backend API
  version: "1.0"
paths:
  /buyers/login:
    post:
      consumes:
      - application/json
      description: Checks to see if a buyer email exists and if supplied password
        matches the stored password
      parameters:
      - description: Buyers email
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: Buyers password as plaintext
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.BuyerLoginResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/data.Message'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/data.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/data.Message'
      summary: Logs a buyer into their account
  /buyers/signup:
    post:
      consumes:
      - application/json
      description: Checks to see if a buyer email exists and if not creates a new
        account with supplied email and password
      parameters:
      - description: Buyers email [UNIQUE]
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: Buyers password as plaintext
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.BuyerLoginResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/data.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/data.Message'
      summary: Signs a new buyer up
  /products:
    post:
      description: Creates a new product post with the supplied data, if the data
        is not valid it throws and error
      parameters:
      - description: The Seller who posted the product's seller_id
        in: body
        name: seller_id
        required: true
        schema:
          type: string
      - description: Title of the product
        in: body
        name: title
        required: true
        schema:
          type: string
      - description: Short description of the product
        in: body
        name: description
        required: true
        schema:
          type: string
      - description: Price as an int of the product
        in: body
        name: price
        required: true
        schema:
          type: integer
      - description: Condition of the product from a scale of 0 to 5
        in: body
        name: condition
        required: true
        schema:
          type: integer
      - description: 'Type of product sale: Buy-Now or Pre-Order'
        in: body
        name: product_type
        required: true
        schema:
          type: string
      - description: Quantity of product to be put for sale
        in: body
        name: product_quantity
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/data.ProductCreateResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/data.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/data.Message'
      summary: Creates a new product post
  /products/{id}:
    get:
      description: Checks to see if a product with a given id exists and returns its
        product information if it does.
      parameters:
      - description: product_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.GetProductResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/data.Message'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/data.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/data.Message'
      summary: Gets a Product by its Product ID
  /products/{id}/images:
    post:
      consumes:
      - multipart/form-data
      description: Adds images to an existing product with supplied product id. If
        product with product id does not exist returns a
      parameters:
      - description: product_id
        in: path
        name: id
        required: true
        type: string
      - description: Array of image files to add to the product post
        in: formData
        name: images
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/data.Message'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/data.Message'
        "415":
          description: Unsupported Media Type
          schema:
            $ref: '#/definitions/data.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/data.Message'
      summary: Adds images to products
  /sellers/login:
    post:
      consumes:
      - application/json
      description: Checks to see if a sellers email exists and if supplied password
        matches the stored password
      parameters:
      - description: Sellers email
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: Sellers password as plaintext
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.SellerResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/data.Message'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/data.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/data.Message'
      summary: Logs a seller into their account
  /sellers/signup:
    post:
      consumes:
      - application/json
      description: Checks to see if a seller email does not already exists if so creates
        a new
      parameters:
      - description: Sellers email [UNIQUE]
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: Sellers password as plaintext
        in: body
        name: password
        required: true
        schema:
          type: string
      - description: Sellers seller alias that is displayed as their seller name [UNIQUE]
        in: body
        name: seller_name
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.SellerResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/data.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/data.Message'
      summary: Signs a new seller up
swagger: "2.0"
