// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/buyers/login": {
            "post": {
                "description": "Checks to see if a buyer email exists and if supplied password matches the stored password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Logs a buyer into their account",
                "parameters": [
                    {
                        "description": "Buyers email",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Buyers password as plaintext",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.BuyerLoginResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    }
                }
            }
        },
        "/buyers/resend-otp": {
            "post": {
                "description": "Checks to see if the provided buyer_id exists and sends a email to the specific buy_ids email with a newly",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Sends a new Otp to the provided email",
                "parameters": [
                    {
                        "description": "Buyer Id",
                        "name": "buyer_id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    }
                }
            }
        },
        "/buyers/signup": {
            "post": {
                "description": "Checks to see if a buyer email exists and if not creates a new account with supplied email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Signs a new buyer up",
                "parameters": [
                    {
                        "description": "Buyers email [UNIQUE]",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Buyers password as plaintext",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.BuyerLoginResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    }
                }
            }
        },
        "/buyers/validate-otp": {
            "post": {
                "description": "Checks to see if the provided buyer exists, if not returns a 400. Otherwise it checks to see if the otps match. If not it",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Validates a given otp from a specific buyer",
                "parameters": [
                    {
                        "description": "Buyer Id",
                        "name": "buyer_id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Otp",
                        "name": "otp",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.BuyerLoginResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    }
                }
            }
        },
        "/orders": {
            "post": {
                "description": "Creates a new order for a specific product. This order is created by an existing buyer with an account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Creates a new order",
                "parameters": [
                    {
                        "description": "The products for which we are creating an order",
                        "name": "products",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/data.ProductOrder"
                            }
                        }
                    },
                    {
                        "description": "The id of the buyer who is creating the order",
                        "name": "buyer_id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Phone number of buyer",
                        "name": "phone_number",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Delivery Address",
                        "name": "address_line_1",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Delivery Address 2",
                        "name": "address_line_2",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Postal code of address",
                        "name": "postal_code",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Delivery Type is either 'self_collection' or 'standard delivery', Payment type is 'card' or 'paynow_online'",
                        "name": "fees",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/data.OrderFees"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/data.CreateOrderResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    }
                }
            }
        },
        "/orders/guest": {
            "post": {
                "description": "Creates a new order for a specific product. This order is created by a guest user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Creates a new guest order",
                "parameters": [
                    {
                        "description": "The products for which we are creating an order",
                        "name": "products",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/data.ProductOrder"
                            }
                        }
                    },
                    {
                        "description": "The email of the guest user",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Phone number of buyer",
                        "name": "phone_number",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Delivery Address",
                        "name": "address_line_1",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Delivery Address 2",
                        "name": "address_line_2",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Postal code of address",
                        "name": "postal_code",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Delivery Type is either 'self_collection' or 'standard delivery', Payment type is 'card' or 'paynow_online'",
                        "name": "fees",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/data.OrderFees"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/data.CreateGuestOrderResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    }
                }
            }
        },
        "/orders/{id}": {
            "get": {
                "description": "Returns the order details of an order with a given order id. If the order id does not exists, returns a 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Fetched order details for an order with a specific order id",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.GetOrderByIdResponseData"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    }
                }
            }
        },
        "/orders/{id}/guest": {
            "get": {
                "description": "Returns the order details of an guest order with a given guest order id. If the order id does not exists, returns a 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Fetched order details for an guest order with a specific guest order id",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.GetGuestOrderByIdResponseData"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "description": "Gets product information of products given query parameters provided in the Request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Gets Products with given query parameters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sort By a specific attribute of the product. Default is posted_date",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Get products by a specific product type, the types are 'Pre-Order' or 'Buy-Now'. Default is both will be selected",
                        "name": "product_types",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Get products filtered by the language of the expansion. The choices are 'Eng' or 'Jap' and default is both.",
                        "name": "languages",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Get products filtered by the expansion of the product. Default is all expansions",
                        "name": "expansions",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Gets products filtered by prices ranges, the ranges are '0-20', '20-50', '50-100', '100-200', '200'",
                        "name": "prices",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Indicates the offset for the products",
                        "name": "anchor",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Indicates the number of products fetched",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.GetProductListResponseData"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new product post with the supplied data, if the data is not valid it throws and error",
                "produces": [
                    "application/json"
                ],
                "summary": "Creates a new product post",
                "parameters": [
                    {
                        "description": "The Seller who posted the product's seller_id",
                        "name": "seller_id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Title of the product",
                        "name": "title",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Short description of the product",
                        "name": "description",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Price as an int of the product",
                        "name": "price",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Condition of the product from a scale of 0 to 5",
                        "name": "condition",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Type of product sale: Buy-Now or Pre-Order",
                        "name": "product_type",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Language of the product, is either 'Eng' or 'Jap'",
                        "name": "language",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Expansion of the product",
                        "name": "expansion",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Quantity of product to be put for sale",
                        "name": "product_quantity",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/data.CreateProductResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    }
                }
            }
        },
        "/products/{id}": {
            "get": {
                "description": "Checks to see if a product with a given id exists and returns its product information if it does.",
                "produces": [
                    "application/json"
                ],
                "summary": "Gets a Product by its Product ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "product_id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.GetProductResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    }
                }
            }
        },
        "/products/{id}/images": {
            "post": {
                "description": "Adds images to an existing product with supplied product id. If product with product id does not exist returns a",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Adds images to products",
                "parameters": [
                    {
                        "type": "string",
                        "description": "product_id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Array of image files to add to the product post",
                        "name": "images",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    },
                    "415": {
                        "description": "Unsupported Media Type",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    }
                }
            }
        },
        "/sellers/login": {
            "post": {
                "description": "Checks to see if a sellers email exists and if supplied password matches the stored password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Logs a seller into their account",
                "parameters": [
                    {
                        "description": "Sellers email",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Sellers password as plaintext",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.SellerLoginResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    }
                }
            }
        },
        "/sellers/signup": {
            "post": {
                "description": "Checks to see if a seller email does not already exists if so creates a new",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Signs a new seller up",
                "parameters": [
                    {
                        "description": "Sellers email [UNIQUE]",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Sellers password as plaintext",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Sellers seller alias that is displayed as their seller name [UNIQUE]",
                        "name": "seller_name",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.SellerLoginResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    }
                }
            }
        },
        "/sellers/{id}": {
            "get": {
                "description": "Checks to see if a sellers id exists and if it does returns the specified sellers public information,",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Gets seller info based on seller id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "seller_id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.GetSellerByIdResponseData"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/data.Message"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "data.BuyerLoginResponseData": {
            "type": "object",
            "required": [
                "buyer_id",
                "email",
                "verification"
            ],
            "properties": {
                "buyer_id": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "verification": {
                    "type": "string"
                }
            }
        },
        "data.CreateGuestOrderResponseData": {
            "type": "object",
            "required": [
                "guest_order_id",
                "redirect_url"
            ],
            "properties": {
                "guest_order_id": {
                    "type": "string"
                },
                "redirect_url": {
                    "type": "string"
                }
            }
        },
        "data.CreateOrderResponseData": {
            "type": "object",
            "required": [
                "order_id",
                "redirect_url"
            ],
            "properties": {
                "order_id": {
                    "type": "string"
                },
                "redirect_url": {
                    "type": "string"
                }
            }
        },
        "data.CreateProductResponseData": {
            "type": "object",
            "required": [
                "condition",
                "desc",
                "expansion",
                "language",
                "posted_date",
                "price",
                "product_id",
                "product_quantity",
                "product_type",
                "seller_id",
                "sold_quantity",
                "title"
            ],
            "properties": {
                "condition": {
                    "type": "integer"
                },
                "desc": {
                    "type": "string"
                },
                "discount": {
                    "type": "integer"
                },
                "expansion": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "order_by": {
                    "type": "string"
                },
                "posted_date": {
                    "type": "string",
                    "example": "2023-08-03 02:50:26.034552906 +0000 UTC m=+192.307467936"
                },
                "price": {
                    "type": "integer"
                },
                "product_id": {
                    "type": "string"
                },
                "product_quantity": {
                    "type": "integer"
                },
                "product_type": {
                    "type": "string"
                },
                "releases_on": {
                    "type": "string"
                },
                "seller_id": {
                    "type": "string"
                },
                "sold_quantity": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "data.GetGuestOrderByIdResponseData": {
            "type": "object",
            "required": [
                "address_line_1",
                "email",
                "fees",
                "guest_order_id",
                "order_date",
                "payment_status",
                "phone_number",
                "postal_code",
                "products"
            ],
            "properties": {
                "address_line_1": {
                    "type": "string"
                },
                "address_line_2": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "fees": {
                    "$ref": "#/definitions/data.OrderFees"
                },
                "guest_order_id": {
                    "type": "string"
                },
                "order_date": {
                    "type": "string"
                },
                "payment_status": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "postal_code": {
                    "type": "string"
                },
                "products": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/data.ProductOrder"
                    }
                },
                "telegram_handle": {
                    "type": "string"
                }
            }
        },
        "data.GetOrderByIdResponseData": {
            "type": "object",
            "required": [
                "address_line_1",
                "buyer_id",
                "fees",
                "order_date",
                "order_id",
                "payment_status",
                "phone_number",
                "postal_code",
                "products"
            ],
            "properties": {
                "address_line_1": {
                    "type": "string"
                },
                "address_line_2": {
                    "type": "string"
                },
                "buyer_id": {
                    "type": "string"
                },
                "fees": {
                    "$ref": "#/definitions/data.OrderFees"
                },
                "order_date": {
                    "type": "string"
                },
                "order_id": {
                    "type": "string"
                },
                "payment_status": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "postal_code": {
                    "type": "string"
                },
                "products": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/data.ProductOrder"
                    }
                },
                "telegram_handle": {
                    "type": "string"
                }
            }
        },
        "data.GetProductListResponseData": {
            "type": "object",
            "required": [
                "product_count",
                "products"
            ],
            "properties": {
                "product_count": {
                    "type": "integer"
                },
                "products": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/data.GetProductResponseData"
                    }
                }
            }
        },
        "data.GetProductResponseData": {
            "type": "object",
            "required": [
                "condition",
                "desc",
                "expansion",
                "images",
                "language",
                "posted_date",
                "price",
                "product_id",
                "product_quantity",
                "product_type",
                "seller_info",
                "sold_quantity",
                "title"
            ],
            "properties": {
                "condition": {
                    "type": "integer"
                },
                "desc": {
                    "type": "string"
                },
                "discount": {
                    "type": "integer"
                },
                "expansion": {
                    "type": "string"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/data.ProductImageData"
                    }
                },
                "language": {
                    "type": "string"
                },
                "order_by": {
                    "type": "string"
                },
                "posted_date": {
                    "type": "string",
                    "example": "2023-08-03 02:50:26.034552906 +0000 UTC m=+192.307467936"
                },
                "price": {
                    "type": "integer"
                },
                "product_id": {
                    "type": "string"
                },
                "product_quantity": {
                    "type": "integer"
                },
                "product_type": {
                    "type": "string"
                },
                "releases_on": {
                    "type": "string"
                },
                "seller_info": {
                    "$ref": "#/definitions/data.GetSellerByIdResponseData"
                },
                "sold_quantity": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "data.GetSellerByIdResponseData": {
            "type": "object",
            "required": [
                "followers",
                "seller_id",
                "seller_name"
            ],
            "properties": {
                "followers": {
                    "type": "integer"
                },
                "seller_id": {
                    "type": "string"
                },
                "seller_name": {
                    "type": "string"
                }
            }
        },
        "data.Message": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "data.OrderFees": {
            "type": "object",
            "required": [
                "delivery_type",
                "payment_type",
                "total_paid"
            ],
            "properties": {
                "delivery_fee": {
                    "type": "integer"
                },
                "delivery_type": {
                    "type": "string"
                },
                "payment_fee": {
                    "type": "integer"
                },
                "payment_type": {
                    "type": "string"
                },
                "small_order_fee": {
                    "type": "integer"
                },
                "total_paid": {
                    "type": "integer"
                }
            }
        },
        "data.ProductImageData": {
            "type": "object",
            "required": [
                "image_no",
                "image_path"
            ],
            "properties": {
                "image_no": {
                    "type": "integer"
                },
                "image_path": {
                    "type": "string"
                }
            }
        },
        "data.ProductOrder": {
            "type": "object",
            "required": [
                "order_quantity",
                "product_id"
            ],
            "properties": {
                "order_quantity": {
                    "type": "integer"
                },
                "product_id": {
                    "type": "string"
                }
            }
        },
        "data.SellerLoginResponseData": {
            "type": "object",
            "required": [
                "email",
                "followers",
                "seller_id",
                "seller_name"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "followers": {
                    "type": "integer"
                },
                "seller_id": {
                    "type": "string"
                },
                "seller_name": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "*",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "AUCTO Backend API",
	Description:      "This is the REST API for Aucto's marketplace, it is currently in v1.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
